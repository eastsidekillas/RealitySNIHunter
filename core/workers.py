"""Worker threads for RealitySNIHunter."""

import asyncio
import aiohttp
from PySide6.QtCore import QThread, Signal
from .networking import (
    tls_sni_discover_async, check_sni_with_target_async,
    read_geoip_urls_async, read_geosite_urls_async,
    download_geoip_db_async, load_geoip_db, get_country_code
)


class GeoIPDownloadWorker(QThread):
    """Worker –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ GeoIP –±–∞–∑—ã Country.mmdb."""

    log_signal = Signal(str)
    done_signal = Signal(bool)

    def __init__(self, url: str):
        super().__init__()
        self.url = url

    def run(self):
        asyncio.run(self.async_run())

    async def async_run(self):
        try:
            self.log_signal.emit("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ GeoIP –±–∞–∑—ã Country.mmdb...")

            success = await download_geoip_db_async(self.url, "data/Country.mmdb")

            if success:
                self.log_signal.emit("‚úÖ GeoIP –±–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

                if load_geoip_db("data/Country.mmdb"):
                    self.log_signal.emit("‚úÖ GeoIP –±–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
                    self.done_signal.emit(True)
                else:
                    self.log_signal.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –±–∞–∑—É")
                    self.done_signal.emit(False)
            else:
                self.log_signal.emit("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GeoIP –±–∞–∑—ã")
                self.done_signal.emit(False)

        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.done_signal.emit(False)


class GeoDataWorker(QThread):
    """Worker –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Geo –¥–∞–Ω–Ω—ã—Ö (IP –∏ –¥–æ–º–µ–Ω—ã)."""

    done_signal = Signal(list, list)

    def __init__(self, geoip_urls: list, geosite_urls: list):
        super().__init__()
        self.geoip_urls = geoip_urls
        self.geosite_urls = geosite_urls

    def run(self):
        asyncio.run(self.async_run())

    async def async_run(self):
        async with aiohttp.ClientSession() as session:
            ip_list = []
            domain_list = []

            if self.geoip_urls:
                ip_list = await read_geoip_urls_async(session, self.geoip_urls)

            if self.geosite_urls:
                domain_list = await read_geosite_urls_async(session, self.geosite_urls)

            self.done_signal.emit(ip_list, domain_list)


class ScanWorker(QThread):
    """Worker –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è IP –∞–¥—Ä–µ—Å–æ–≤ –∏ –¥–æ–º–µ–Ω–æ–≤."""

    log_signal = Signal(str)
    progress_signal = Signal(int, int)
    done_signal = Signal(list, list, int)

    def __init__(self, ip_list: list, domain_list: list, port: int, concurrency: int):
        super().__init__()
        self.ip_list = ip_list
        self.domain_list = domain_list
        self.port = port
        self.concurrency = concurrency
        self.rows = []
        self.discovered_snis = set()

    def run(self):
        asyncio.run(self.async_run())

    async def async_run(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        targets = []

        # IP –∞–¥—Ä–µ—Å–∞
        for ip in self.ip_list:
            targets.append(('ip', ip))

        # –î–æ–º–µ–Ω—ã
        for domain in self.domain_list:
            targets.append(('domain', domain))

        total = len(targets)

        if total == 0:
            self.log_signal.emit("‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.done_signal.emit([], [], 0)
            return

        self.log_signal.emit(f"üîç –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {total} —Ü–µ–ª–µ–π...")
        self.progress_signal.emit(0, total)

        semaphore = asyncio.Semaphore(self.concurrency)
        completed = 0

        async def scan_target(target_type: str, target: str):
            nonlocal completed
            async with semaphore:
                try:
                    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ü–µ–ª—å
                    success, sni, details = await tls_sni_discover_async(target, self.port, timeout=5.0)

                    completed += 1
                    self.progress_signal.emit(completed, total)

                    if success and sni:
                        self.discovered_snis.add(sni)

                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
                        country = get_country_code(target) if target_type == 'ip' else 'N/A'

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏
                        protocol = details.get('protocol', 'Unknown')
                        cipher = details.get('cipher', 'Unknown')
                        cert = details.get('cert', {})

                        # Issuer
                        issuer = 'Unknown'
                        if cert and 'issuer' in cert:
                            issuer_tuple = cert['issuer']
                            for item in issuer_tuple:
                                for key, value in item:
                                    if key == 'organizationName':
                                        issuer = value
                                        break

                        row = {
                            'ip': target if target_type == 'ip' else 'N/A',
                            'sni': sni,
                            'tls_version': protocol,
                            'cipher': cipher,
                            'alpn': 'N/A',  # ALPN —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                            'issuer': issuer,
                            'country': country
                        }

                        self.rows.append(row)
                        self.log_signal.emit(f"‚úÖ [{completed}/{total}] {target} ‚Üí {sni}")
                    else:
                        self.log_signal.emit(f"‚ùå [{completed}/{total}] {target}: –ù–µ—Ç TLS –∏–ª–∏ SNI")

                except Exception as e:
                    completed += 1
                    self.progress_signal.emit(completed, total)
                    self.log_signal.emit(f"‚ùå [{completed}/{total}] {target}: {str(e)[:50]}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        tasks = [scan_target(t_type, t_value) for t_type, t_value in targets]
        await asyncio.gather(*tasks, return_exceptions=True)

        self.log_signal.emit(f"\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(self.discovered_snis)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SNI")
        self.done_signal.emit(self.rows, list(self.discovered_snis), total)


class SniCheckerWorker(QThread):
    """Worker –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SNI —Å —Ü–µ–ª–µ–≤—ã–º IP."""

    log_signal = Signal(str)
    progress_signal = Signal(int, int)
    result_signal = Signal(list)

    def __init__(self, target_ip: str, sni_list: list, port: int, concurrency: int):
        super().__init__()
        self.target_ip = target_ip
        self.sni_list = sni_list
        self.port = port
        self.concurrency = concurrency
        self.working_snis = []

    def run(self):
        asyncio.run(self.async_run())

    async def async_run(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SNI."""
        total = len(self.sni_list)

        if total == 0:
            self.log_signal.emit("‚ö†Ô∏è –ù–µ—Ç SNI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            self.result_signal.emit([])
            return

        self.log_signal.emit(f"üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ {total} SNI —Å IP {self.target_ip}...")
        self.progress_signal.emit(0, total)

        semaphore = asyncio.Semaphore(self.concurrency)
        completed = 0

        async def check_sni(sni: str):
            nonlocal completed
            async with semaphore:
                try:
                    success = await check_sni_with_target_async(self.target_ip, sni, self.port, timeout=5.0)

                    completed += 1
                    self.progress_signal.emit(completed, total)

                    if success:
                        self.working_snis.append(sni)
                        self.log_signal.emit(f"‚úÖ [{completed}/{total}] {sni}: –†–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        self.log_signal.emit(f"‚ùå [{completed}/{total}] {sni}: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

                except Exception as e:
                    completed += 1
                    self.progress_signal.emit(completed, total)
                    self.log_signal.emit(f"‚ùå [{completed}/{total}] {sni}: {str(e)[:50]}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        tasks = [check_sni(sni) for sni in self.sni_list]
        await asyncio.gather(*tasks, return_exceptions=True)

        self.log_signal.emit(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.working_snis)}/{total} SNI —Ä–∞–±–æ—Ç–∞—é—Ç")
        self.result_signal.emit(self.working_snis)